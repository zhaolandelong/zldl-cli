#! /usr/bin/env node
const program = require('commander')
const inquirer = require('inquirer')
const chalk = require('chalk')
const exec = require('child_process').exec
const tpls = require('./templates')

program
  .command('init')
  .description('初始化项目')
  .option('--name [projectName]')
  .option('--eslint', '启用eslint-loader')
  .action(option => {
    const config = Object.assign({
      name: null,
      eslint: false
    }, option)
    const promps = []
    if (!config.name) {
      promps.push({
        type: 'input',
        name: 'name',
        message: 'Project name:',
        validate: function (input) {
          if (!input) {
            return '不能为空'
          }
          return true
        }
      })
    }
    if (!config.eslint) {
      promps.push({
        type: 'list',
        name: 'eslint',
        message: 'Use eslint-loader to check js/jsx:',
        choices: [
          {
            name: 'no',
            value: false
          },
          {
            name: 'Yes',
            value: true
          }
        ]
      })
    }
    inquirer.prompt(promps).then(function (answers) {
      console.log(answers)
      let tplName;
      if (answers.eslint) {
        tplName = 'react-eslint-loader';
      } else {
        tplName = 'react';
      }
      const { url, branch } = tpls[tplName];
      // git命令，远程拉取项目并自定义项目名  
      let cmdStr = `git clone ${url} ${answers.name} && cd ${answers.name} && git checkout ${branch}`

      console.log(chalk.white('\n Start generating...'))

      exec(cmdStr, (error, stdout, stderr) => {
        if (error) {
          console.log(error)
          process.exit()
        }
        console.log(chalk.green('\n √ Generation completed!'))
        console.log(chalk.green(`\n cd ${answers.name} && npm install \n`))
        process.exit()
      })
    })
  })
  .on('--help', function () {
    console.log('  Examples:')
    console.log('')
    console.log('$ app module moduleName')
    console.log('$ app m moduleName')
  })
program.parse(process.argv)